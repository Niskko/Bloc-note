/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blocnotes;

import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author loicp Je tiens à préciser que j'ai fais une erreur, et l'onglet
 * "Design" n'apparait plus
 *
 */
public class blocnotes extends javax.swing.JFrame {

	/**
	 * Creates new form blocnotes
	 */
	public blocnotes() {
		initComponents();
		this.menuItemActivation();
		this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor. (sauf quand on perd le .form)
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		textarea = new javax.swing.JScrollPane();
		textArea = new javax.swing.JTextArea();
		bar = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jSeparator4 = new javax.swing.JSeparator();
		zoom = new javax.swing.JLabel();
		jSeparator2 = new javax.swing.JSeparator();
		os = new javax.swing.JLabel();
		jSeparator3 = new javax.swing.JSeparator();
		format = new javax.swing.JLabel();
		menubar = new javax.swing.JMenuBar();
		fichier = new javax.swing.JMenu();
		newnote = new javax.swing.JMenuItem();
		newwindow = new javax.swing.JMenuItem();
		open = new javax.swing.JMenuItem();
		save = new javax.swing.JMenuItem();
		saveas = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JPopupMenu.Separator();
		quitter = new javax.swing.JMenuItem();
		modifier = new javax.swing.JMenu();
		cut = new javax.swing.JMenuItem();
		copy = new javax.swing.JMenuItem();
		paste = new javax.swing.JMenuItem();
		del = new javax.swing.JMenuItem();
		jSeparator5 = new javax.swing.JPopupMenu.Separator();
		selectall = new javax.swing.JMenuItem();
		date = new javax.swing.JMenuItem();
		affichage = new javax.swing.JMenu();
		statebar = new javax.swing.JCheckBoxMenuItem();
		linewrap = new javax.swing.JCheckBoxMenuItem();
		jSeparator6 = new javax.swing.JPopupMenu.Separator();
		theme = new javax.swing.JMenuItem();

		setDefaultCloseOperation(2);
		setTitle("Sans titre - Bloc-notes");
		setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/assets/ico.png")));
		setBackground(new java.awt.Color(0, 0, 0));
		setMinimumSize(new java.awt.Dimension(1200, 700));

		textarea.setBorder(null);

		textArea.setBackground(new java.awt.Color(39, 39, 39));
		textArea.setColumns(20);
		textArea.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
		textArea.setForeground(new java.awt.Color(255, 255, 255));
		textArea.setRows(5);
		textArea.setAlignmentX(2.0F);
		textArea.setAlignmentY(2.0F);
		textArea.setBorder(null);
		textArea.setDragEnabled(true);
		textArea.setMargin(new java.awt.Insets(10, 10, 10, 10));
		textArea.setSelectedTextColor(new java.awt.Color(255, 255, 255));
		textArea.setSelectionColor(new java.awt.Color(0, 120, 215));
		textArea.addCaretListener(new javax.swing.event.CaretListener() {
			public void caretUpdate(javax.swing.event.CaretEvent evt) {
				CaretUpdate(evt);
			}
		});
		textarea.setViewportView(textArea);

		getContentPane().add(textarea, java.awt.BorderLayout.CENTER);

		bar.setBackground(new java.awt.Color(31, 32, 31));
		bar.setForeground(new java.awt.Color(255, 255, 255));
		bar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		bar.setLayout(new java.awt.BorderLayout());

		jPanel3.setBackground(new java.awt.Color(31, 32, 31));

		jLabel1.setForeground(new java.awt.Color(255, 255, 255));
		jLabel1.setText("Ln 1, Col 1");
		jPanel3.add(jLabel1);

		bar.add(jPanel3, java.awt.BorderLayout.WEST);

		jPanel2.setBackground(new java.awt.Color(31, 32, 31));

		jSeparator4.setBackground(new java.awt.Color(49, 50, 49));
		jSeparator4.setForeground(new java.awt.Color(49, 50, 49));
		jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator4.setPreferredSize(new java.awt.Dimension(2, 15));
		jPanel2.add(jSeparator4);

		zoom.setForeground(new java.awt.Color(179, 179, 179));
		zoom.setText("100%");
		jPanel2.add(zoom);

		jSeparator2.setBackground(new java.awt.Color(49, 50, 49));
		jSeparator2.setForeground(new java.awt.Color(49, 50, 49));
		jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator2.setPreferredSize(new java.awt.Dimension(2, 15));
		jPanel2.add(jSeparator2);

		os.setForeground(new java.awt.Color(179, 179, 179));
		os.setText("Windows (CRLF)");
		jPanel2.add(os);

		jSeparator3.setBackground(new java.awt.Color(49, 50, 49));
		jSeparator3.setForeground(new java.awt.Color(49, 50, 49));
		jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
		jSeparator3.setPreferredSize(new java.awt.Dimension(2, 15));
		jPanel2.add(jSeparator3);

		format.setForeground(new java.awt.Color(179, 179, 179));
		format.setText("UTF-8");
		jPanel2.add(format);

		bar.add(jPanel2, java.awt.BorderLayout.EAST);

		getContentPane().add(bar, java.awt.BorderLayout.PAGE_END);

		menubar.setBackground(new java.awt.Color(30, 33, 30));
		menubar.setBorder(null);
		menubar.setForeground(new java.awt.Color(0, 0, 0));
		menubar.setMinimumSize(new java.awt.Dimension(145, 25));
		menubar.setPreferredSize(new java.awt.Dimension(145, 25));

		fichier.setBackground(new java.awt.Color(30, 33, 30));
		fichier.setBorder(null);
		fichier.setForeground(new java.awt.Color(255, 255, 255));
		fichier.setText("Fichier");

		newnote.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		newnote.setBackground(new java.awt.Color(44, 44, 44));
		newnote.setForeground(new java.awt.Color(255, 255, 255));
		newnote.setText("Nouveau");
		newnote.setMargin(new java.awt.Insets(10, 10, 10, 10));
		newnote.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newnoteActionPerformed(evt);
			}
		});
		fichier.add(newnote);

		newwindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
		newwindow.setBackground(new java.awt.Color(44, 44, 44));
		newwindow.setForeground(new java.awt.Color(255, 255, 255));
		newwindow.setText("Nouvelle Fenêtre");
		newwindow.setMargin(new java.awt.Insets(10, 10, 10, 10));
		newwindow.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newwindowActionPerformed(evt);
			}
		});
		fichier.add(newwindow);

		open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		open.setBackground(new java.awt.Color(44, 44, 44));
		open.setForeground(new java.awt.Color(255, 255, 255));
		open.setText("Ouvrir");
		open.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				openActionPerformed(evt);
			}
		});
		fichier.add(open);

		save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		save.setBackground(new java.awt.Color(44, 44, 44));
		save.setForeground(new java.awt.Color(255, 255, 255));
		save.setText("Enregistrer");
		save.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveActionPerformed(evt);
			}
		});
		fichier.add(save);

		saveas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
		saveas.setBackground(new java.awt.Color(44, 44, 44));
		saveas.setForeground(new java.awt.Color(255, 255, 255));
		saveas.setText("Enregistrer sous");
		saveas.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveasActionPerformed(evt);
			}
		});
		fichier.add(saveas);

		jSeparator1.setBackground(new java.awt.Color(30, 33, 30));
		jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
		fichier.add(jSeparator1);

		quitter.setBackground(new java.awt.Color(44, 44, 44));
		quitter.setForeground(new java.awt.Color(255, 255, 255));
		quitter.setText("Quitter");
		quitter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveasActionPerformed(evt);
			}
		});
		fichier.add(quitter);

		menubar.add(fichier);

		modifier.setBackground(new java.awt.Color(30, 33, 30));
		modifier.setBorder(null);
		modifier.setForeground(new java.awt.Color(255, 255, 255));
		modifier.setText("Modifier");

		cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		cut.setBackground(new java.awt.Color(44, 44, 44));
		cut.setForeground(new java.awt.Color(255, 255, 255));
		cut.setText("Couper");
		cut.setMargin(new java.awt.Insets(10, 10, 10, 10));
		cut.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cutActionPerformed(evt);
			}
		});
		modifier.add(cut);

		copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		copy.setBackground(new java.awt.Color(44, 44, 44));
		copy.setForeground(new java.awt.Color(255, 255, 255));
		copy.setText("Copier");
		copy.setMargin(new java.awt.Insets(10, 10, 10, 10));
		copy.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				copyActionPerformed(evt);
			}
		});
		modifier.add(copy);

		paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		paste.setBackground(new java.awt.Color(44, 44, 44));
		paste.setForeground(new java.awt.Color(255, 255, 255));
		paste.setText("Coller");
		paste.setMargin(new java.awt.Insets(10, 10, 10, 10));
		paste.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pasteActionPerformed(evt);
			}
		});
		modifier.add(paste);

		del.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
		del.setBackground(new java.awt.Color(44, 44, 44));
		del.setForeground(new java.awt.Color(255, 255, 255));
		del.setText("Supprimer");
		del.setMargin(new java.awt.Insets(10, 10, 10, 10));
		del.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				delActionPerformed(evt);
			}
		});
		modifier.add(del);

		jSeparator5.setBackground(new java.awt.Color(30, 33, 30));
		jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
		modifier.add(jSeparator5);

		selectall.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
		selectall.setBackground(new java.awt.Color(44, 44, 44));
		selectall.setForeground(new java.awt.Color(255, 255, 255));
		selectall.setText("Tout séléctionner");
		selectall.setMargin(new java.awt.Insets(10, 10, 10, 10));
		selectall.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				selectallActionPerformed(evt);
			}
		});
		modifier.add(selectall);

		date.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
		date.setBackground(new java.awt.Color(44, 44, 44));
		date.setForeground(new java.awt.Color(255, 255, 255));
		date.setText("Heure/date");
		date.setMargin(new java.awt.Insets(10, 10, 10, 10));
		date.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dateActionPerformed(evt);
			}
		});
		modifier.add(date);

		menubar.add(modifier);

		affichage.setBackground(new java.awt.Color(30, 33, 30));
		affichage.setBorder(null);
		affichage.setForeground(new java.awt.Color(255, 255, 255));
		affichage.setText("Affichage");

		statebar.setBackground(new java.awt.Color(44, 44, 44));
		statebar.setForeground(new java.awt.Color(255, 255, 255));
		statebar.setSelected(true);
		statebar.setText("Barre d'état");
		statebar.setBorder(null);
		statebar.setBorderPainted(false);
		statebar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				statebarActionPerformed(evt);
			}
		});
		affichage.add(statebar);

		linewrap.setBackground(new java.awt.Color(44, 44, 44));
		linewrap.setForeground(new java.awt.Color(255, 255, 255));
		linewrap.setSelected(false);
		linewrap.setText("Retour automatique à la ligne");
		linewrap.setBorder(null);
		linewrap.setBorderPainted(false);
		linewrap.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				linewrapActionPerformed(evt);
			}
		});
		affichage.add(linewrap);

		jSeparator6.setBackground(new java.awt.Color(30, 33, 30));
		jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
		affichage.add(jSeparator6);

		theme.setBackground(new java.awt.Color(44, 44, 44));
		theme.setForeground(new java.awt.Color(255, 255, 255));
		theme.setText("Thème");
		theme.setBorder(null);
		theme.setMargin(new java.awt.Insets(10, 10, 10, 10));
		theme.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				themeActionPerformed(evt);
			}
		});
		affichage.add(theme);

		menubar.add(affichage);

		setJMenuBar(menubar);

		getAccessibleContext().setAccessibleDescription("oui");

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 *
	 * @param evt
	 * @post Calcul à chaque mouvement du caret la position de celui-ci selon les caractère du texte
	 */
	private void CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextArea1CaretUpdate
		int pos = this.textArea.getCaretPosition();
		String emplacement = this.textArea.getText().substring(0, pos);
		int column = emplacement.lastIndexOf(10);
		if (column < 0)
		{
			column = pos + 1;
		} else
		{
			column = pos - column;
		}

		int line = this.countNumOfChar(emplacement) + 1;
		String str = "Ln " + line + ", Col " + column;
		this.jLabel1.setText(str);
		this.updateTitle();
		this.menuItemActivation();
	}

	/**
	 *
	 * @param savedText
	 * @post sauvegarde le texte du textArea
	 */
	private void setSavedText(String savedText) {
		this.savedText = savedText;
		this.updateTitle();
	}

	/**
	 *
	 * @param str
	 * @post Copie le texte séléctionné
	 */
	private void copy(String str) {
		StringSelection stringSelection = new StringSelection(str);
		this.clipBoard.setContents(stringSelection, (ClipboardOwner) null);
	}

	/**
	 *
	 * @post Supprime le texte séléctionné
	 */
	private void delSelectedText() {
		int pos = this.textArea.getSelectionStart();
		String txt = this.textArea.getText();
		StringBuilder builder = new StringBuilder();
		builder.append(txt.substring(0, this.textArea.getSelectionStart())).append(txt.substring(this.textArea.getSelectionEnd()));
		this.textArea.setText(builder.toString());
		this.textArea.setCaretPosition(pos);
	}

	/**
	 *
	 * @return l'heure et la date sous forme de chaine de caractère
	 */
	private String getFormatHeureDate() {
		SimpleDateFormat formatDate = new SimpleDateFormat("HH:mm dd/MM/yyyy");
		Date horaire = new Date();
		return formatDate.format(horaire);
	}

	/**
	 *
	 * @param cmp
	 * @param str
	 * @post Affiche un message d'erreur selon une chaine de caractère "str"
	 */
	private void showWarningDialog(Component cmp, String str) {
		JOptionPane.showMessageDialog(cmp, str, "Bloc-notes", 2);
	}

	/**
	 *
	 * @param file
	 * @post Afficher un message d'erreur sur la lecture du fichier
	 */
	private void showReadRightWarning(File file) {
		this.showWarningDialog(this, file.getAbsolutePath() + "\nVous n'avez pas l'autorisation d'ouvrir ce fichier. Consultez le propriétaire du fichier ou un administrateur pour obtenir cette autorisation");
	}

	/**
	 *
	 * @param file
	 * @post Afficher un message d'erreur sur l'écriture du fichier
	 */
	private void showWriteRightWarning(File file) {
		this.showWarningDialog(this, file.getAbsolutePath() + "\nVous n'avez pas l'autorisation d'écrire ce fichier. Consultez le propriétaire du fichier ou un administrateur pour obtenir cette autorisation");
	}

	/**
	 *
	 * @post Active ou désactiver les Fonctionnalités Copier, Couper, Coller et Supprimer
	 */
	private void menuItemActivation() {
		this.paste.setEnabled(!this.getClipboard().isEmpty());
		if (this.textArea.getSelectedText() != null && !this.textArea.getSelectedText().isEmpty())
		{
			this.copy.setEnabled(true);
			this.cut.setEnabled(true);
			this.del.setEnabled(true);
		} else
		{
			this.copy.setEnabled(false);
			this.cut.setEnabled(false);
			this.del.setEnabled(false);
		}

	}

	/**
	 *
	 * @param file
	 * @return le contenu du fichier lu sous forme de chaine de caractères
	 * @throws IOException
	 */
	private String readFile(File file) throws IOException {
		StringBuilder build = new StringBuilder();

		Path path = Paths.get(file.getAbsolutePath());

		BufferedReader reader = Files.newBufferedReader(path);
		String str;
		while ((str = reader.readLine()) != null)
		{
			build.append(str).append('\n');
		}

		return build.toString();

	}

	/**
	 *
	 * @param file
	 * @param str
	 * @throws IOException
	 * @post sauvegarde le fichier courant
	 */
	private void writeFile(File file, String str) throws IOException {
		FileOutputStream stream = new FileOutputStream(file);
		stream.write(str.getBytes());
		stream.close();
	}

	/**
	 *
	 * @return false s'il n'y avait pas de fichier en cours et true si
	 * l'enregistrement a été effectué
	 * @throws IOException (Save File)
	 */
	private boolean saveFile() throws IOException {
		if (this.file == null)
		{
			this.saveAsFile();
			return false;
		} else
		{
			this.writeFile(this.file, this.textArea.getText());
			this.setSavedText(this.textArea.getText());
			return true;
		}
	}

	/**
	 *
	 * @return true si il a pu enregistrer le fichier et false si il n'a pas pu
	 * à cause de droit manquant ou d'une erreur
	 * @throws IOException (Save File)
	 * @post Sauvegarde le fichier en demandant à l'utilisateur l'emplacement précis
	 */
	private boolean saveAsFile() throws IOException {
		JFileChooser saveFileChoose = new JFileChooser();
		saveFileChoose.setFileFilter(new FileNameExtensionFilter("fichier texte en .txt", new String[]
		{
			"txt"
		}));
		saveFileChoose.setMultiSelectionEnabled(false);

		int res;
		for (res = saveFileChoose.showSaveDialog(this); res == 0 && saveFileChoose.getSelectedFile().exists() && !saveFileChoose.getSelectedFile().canWrite(); res = saveFileChoose.showSaveDialog(this))
		{
		}

		if (res == 0)
		{
			System.out.println(saveFileChoose.getSelectedFile());
			this.file = saveFileChoose.getSelectedFile();
			if (!saveFileChoose.getFileFilter().accept(this.file))
			{
				String ext = ((FileNameExtensionFilter) saveFileChoose.getFileFilter()).getExtensions()[0];
				String var10003 = this.file.getPath();
				this.file = new File(var10003 + "." + ext);
			}

			return this.saveFile();
		} else
		{
			return false;
		}
	}

	/**
	 *
	 * @post Permet de changer le Titre de l'onglet à chaque instant en fonction du nom du fichier et des modificiations
	 */
	private void updateTitle() {
		//set fileName
		if (this.file != null)
		{
			fileName = this.file.getName();
		} else
		{
			fileName = "Sans titre";
		}

		//set Title
		if (this.isSaved())
		{
			this.setTitle(fileName + " - Bloc-notes");
		} else
		{
			this.setTitle("*" + fileName + " - Bloc-notes");
		}
	}

	/**
	 *
	 * @return Retourne true ssi le texte du textArea est le même que celui
	 * sauvegarder
	 * @post Vérifie si le fichier est sauvegarder ou non
	 */
	private boolean isSaved() {
		String text = this.textArea.getText();
		if (text.equals(this.savedText) && this.file != null)
		{
			return this.file.exists();
		} else
		{
			return text.isBlank();
		}
	}

	/**
	 *
	 * @param str
	 * @post Insert une chaine de caractère (String) à la position du caret
	 */
	private void insertStr(String str) {
		this.delSelectedText();
		int pos = this.textArea.getCaretPosition();
		String txt = this.textArea.getText();
		StringBuilder builder = new StringBuilder();
		builder.append(txt.substring(0, pos)).append(str).append(txt.substring(pos));
		this.textArea.setText(builder.toString());
		this.textArea.setCaretPosition(pos + str.length());
	}

	/**
	 *
	 * @return 0 si l'utilisateur souhaite Enregistrer, 1 s'il ne souhaite pas Enregistrer et 2 s'il souhaite Annuler
	 */
	private int dialogSave() {
		int res = 1;
		if (!this.isSaved())
		{
			res = JOptionPane.showConfirmDialog(this, "Voulez-vous enregistrer les modifications de " + fileName + " ?", "Bloc-notes", 1);
		}

		if (res == 0)
		{
			try
			{
				if (!this.saveAsFile())
				{
					return 2;
				}
			} catch (IOException var3)
			{
				this.showWriteRightWarning(this.file);
			}
		}

		return res;
	}

	/**
	 *
	 * @Override afin d'ajouter une option Annuler (2)
	 * @post ferme la fenêtre si res n'est pas égal à 2
	 */
	@Override
	public void dispose() {
		int res = this.dialogSave();
		if (res != 2)
		{
			super.dispose();
		}

	}

	/**
	 *
	 * @return le Presse-papier de l'utilisateur ou une chaine de caractère vide
	 * si ce n'est pas possible
	 */
	private String getClipboard() {
		String str;
		try
		{
			str = (String) this.clipBoard.getContents(this).getTransferData(DataFlavor.stringFlavor);
		} catch (UnsupportedFlavorException var3)
		{
			str = "";
		} catch (IOException var4)
		{
			str = "";
		}

		return str;
	}

	/**
	 *
	 * @post Ouvre le fichier choisi à l'emplacement choisi par l'utilisateur
	 */
	private void openFile() {
		JFileChooser fileOpen = new JFileChooser();
		fileOpen.setMultiSelectionEnabled(false);
		fileOpen.setFileFilter(new FileNameExtensionFilter("fichier texte en .txt", new String[]
		{
			"txt"
		}));
		int res = fileOpen.showOpenDialog(this);

		File file;
		for (file = fileOpen.getSelectedFile(); res == 0 && file != null && !file.canRead(); file = fileOpen.getSelectedFile())
		{
			this.showReadRightWarning(file);
			res = fileOpen.showOpenDialog(this);
		}

		this.file = file;
		if (res == 0)
		{
			try
			{
				String newTxt = this.readFile(file);
				if (newTxt != null)
				{
					this.textArea.setText(newTxt);
					this.setSavedText(this.textArea.getText());
				}
			} catch (IOException var6)
			{
				this.showReadRightWarning(file);
			}
		}

	}

	/**
	 *
	 * @param str
	 * @return un entier du nombre de caractères que composent une chaine de
	 * caractère donné en argument
	 */
	public int countNumOfChar(String str) {
		int count = 0;

		for (int i = 0; i < str.length(); ++i)
		{
			if (str.charAt(i) == '\n')
			{
				++count;
			}
		}

		return count;
	}

	//
	// Actions des boutons
	//
	/**
	 *
	 * @Fonctionnalité Ouverture de fichier
	 * @param evt
	 */
	private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
		this.openFile();
	}//GEN-LAST:event_openActionPerformed

	/**
	 *
	 * @Fonctionnalité Nouveau
	 * @param evt
	 */
	private void newnoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newnoteActionPerformed
		int res = this.dialogSave();
		if (res != 2)
		{
			this.file = null;
			this.textArea.setText("");
		}
	}//GEN-LAST:event_newnoteActionPerformed

	/**
	 *
	 * @Fonctionnalité Nouvelle fenètre
	 * @param evt
	 */
	private void newwindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newwindowActionPerformed
		blocnotes bl = new blocnotes();
		bl.setLocationRelativeTo(this);
		bl.setVisible(true);
	}//GEN-LAST:event_newnoteActionPerformed

	/**
	 *
	 * @Fonctionnalité Couper
	 * @param evt
	 */
	private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
		this.copy(this.textArea.getSelectedText());
		this.delSelectedText();
	}//GEN-LAST:event_cutActionPerformed

	/**
	 *
	 * @Fonctionnalité Copier
	 * @param evt
	 */
	private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
		this.copy(this.textArea.getSelectedText());
	}//GEN-LAST:event_copyActionPerformed

	/**
	 *
	 * @Fonctionnalité Coller
	 * @param evt
	 */
	private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
		this.insertStr(this.getClipboard());
	}//GEN-LAST:event_pasteActionPerformed

	/**
	 *
	 * @Fonctionnalité Supprimer
	 * @param evt
	 */
	private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
		this.delSelectedText();
	}//GEN-LAST:event_delActionPerformed

	/**
	 *
	 * @Fonctionnalité Tout séléctionner
	 * @param evt
	 */
	private void selectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectallActionPerformed
		this.textArea.selectAll();
	}//GEN-LAST:event_selectallActionPerformed

	/**
	 *
	 * @Fonctionnalité Insérer l'heure et la date
	 * @param evt
	 */
	private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
		this.insertStr(this.getFormatHeureDate());
	}//GEN-LAST:event_dateActionPerformed

	/**
	 *
	 * @Fonctionnalité Changement de thème (Optionnel)
	 * @param evt
	 */
	private void themeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeActionPerformed
		if (blackTheme == true)
		{
			setBackground(new java.awt.Color(0, 0, 0));
			textArea.setBackground(new java.awt.Color(249, 249, 249));
			textArea.setForeground(new java.awt.Color(0, 0, 0));
			textArea.setSelectedTextColor(new java.awt.Color(0, 0, 0));
			textArea.setSelectionColor(new java.awt.Color(151, 198, 235));
			bar.setBackground(new java.awt.Color(241, 244, 241));
			bar.setForeground(new java.awt.Color(92, 93, 92));
			jPanel3.setBackground(new java.awt.Color(241, 244, 241));
			jLabel1.setForeground(new java.awt.Color(92, 93, 92));
			jPanel2.setBackground(new java.awt.Color(241, 244, 241));
			jSeparator4.setBackground(new java.awt.Color(224, 224, 221));
			jSeparator4.setForeground(new java.awt.Color(224, 224, 221));
			zoom.setForeground(new java.awt.Color(92, 93, 92));
			jSeparator2.setBackground(new java.awt.Color(224, 224, 221));
			jSeparator2.setForeground(new java.awt.Color(224, 224, 221));
			os.setForeground(new java.awt.Color(92, 93, 92));
			jSeparator3.setBackground(new java.awt.Color(224, 224, 221));
			jSeparator3.setForeground(new java.awt.Color(224, 224, 221));
			format.setForeground(new java.awt.Color(92, 93, 92));
			menubar.setBackground(new java.awt.Color(239, 246, 239));
			menubar.setForeground(new java.awt.Color(24, 25, 24));
			fichier.setBackground(new java.awt.Color(239, 246, 239));
			fichier.setForeground(new java.awt.Color(24, 25, 24));
			newnote.setBackground(new java.awt.Color(239, 246, 239));
			newnote.setForeground(new java.awt.Color(24, 25, 24));
			newwindow.setBackground(new java.awt.Color(239, 246, 239));
			newwindow.setForeground(new java.awt.Color(24, 25, 24));
			open.setBackground(new java.awt.Color(239, 246, 239));
			open.setForeground(new java.awt.Color(24, 25, 24));
			save.setBackground(new java.awt.Color(239, 246, 239));
			save.setForeground(new java.awt.Color(24, 25, 24));
			saveas.setBackground(new java.awt.Color(239, 246, 239));
			saveas.setForeground(new java.awt.Color(24, 25, 24));
			jSeparator1.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
			quitter.setBackground(new java.awt.Color(239, 246, 239));
			quitter.setForeground(new java.awt.Color(24, 25, 24));
			modifier.setBackground(new java.awt.Color(30, 33, 30));
			modifier.setForeground(new java.awt.Color(24, 25, 24));
			cut.setBackground(new java.awt.Color(239, 246, 239));
			cut.setForeground(new java.awt.Color(24, 25, 24));
			copy.setBackground(new java.awt.Color(239, 246, 239));
			copy.setForeground(new java.awt.Color(24, 25, 24));
			paste.setBackground(new java.awt.Color(239, 246, 239));
			paste.setForeground(new java.awt.Color(24, 25, 24));
			del.setBackground(new java.awt.Color(239, 246, 239));
			del.setForeground(new java.awt.Color(24, 25, 24));
			jSeparator5.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
			selectall.setBackground(new java.awt.Color(239, 246, 239));
			selectall.setForeground(new java.awt.Color(24, 25, 24));
			date.setBackground(new java.awt.Color(239, 246, 239));
			date.setForeground(new java.awt.Color(24, 25, 24));
			affichage.setBackground(new java.awt.Color(30, 33, 30));
			affichage.setForeground(new java.awt.Color(24, 25, 24));
			statebar.setBackground(new java.awt.Color(239, 246, 239));
			statebar.setForeground(new java.awt.Color(24, 25, 24));
			linewrap.setBackground(new java.awt.Color(239, 246, 239));
			linewrap.setForeground(new java.awt.Color(24, 25, 24));
			jSeparator6.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
			theme.setBackground(new java.awt.Color(239, 246, 239));
			theme.setForeground(new java.awt.Color(24, 25, 24));
			blackTheme = false;
		} else
		{
			setBackground(new java.awt.Color(0, 0, 0));
			textArea.setBackground(new java.awt.Color(39, 39, 39));
			textArea.setForeground(new java.awt.Color(255, 255, 255));
			textArea.setSelectedTextColor(new java.awt.Color(255, 255, 255));
			textArea.setSelectionColor(new java.awt.Color(0, 120, 215));
			bar.setBackground(new java.awt.Color(31, 32, 31));
			bar.setForeground(new java.awt.Color(255, 255, 255));
			jPanel3.setBackground(new java.awt.Color(31, 32, 31));
			jLabel1.setForeground(new java.awt.Color(255, 255, 255));
			jPanel2.setBackground(new java.awt.Color(31, 32, 31));
			jSeparator4.setBackground(new java.awt.Color(49, 50, 49));
			jSeparator4.setForeground(new java.awt.Color(49, 50, 49));
			zoom.setForeground(new java.awt.Color(179, 179, 179));
			jSeparator2.setBackground(new java.awt.Color(49, 50, 49));
			jSeparator2.setForeground(new java.awt.Color(49, 50, 49));
			os.setForeground(new java.awt.Color(179, 179, 179));
			jSeparator3.setBackground(new java.awt.Color(49, 50, 49));
			jSeparator3.setForeground(new java.awt.Color(49, 50, 49));
			format.setForeground(new java.awt.Color(179, 179, 179));
			menubar.setBackground(new java.awt.Color(30, 33, 30));
			menubar.setForeground(new java.awt.Color(0, 0, 0));
			fichier.setBackground(new java.awt.Color(30, 33, 30));
			fichier.setForeground(new java.awt.Color(255, 255, 255));
			newnote.setBackground(new java.awt.Color(44, 44, 44));
			newnote.setForeground(new java.awt.Color(255, 255, 255));
			newwindow.setBackground(new java.awt.Color(44, 44, 44));
			newwindow.setForeground(new java.awt.Color(255, 255, 255));
			open.setBackground(new java.awt.Color(44, 44, 44));
			open.setForeground(new java.awt.Color(255, 255, 255));
			save.setBackground(new java.awt.Color(44, 44, 44));
			save.setForeground(new java.awt.Color(255, 255, 255));
			saveas.setBackground(new java.awt.Color(44, 44, 44));
			saveas.setForeground(new java.awt.Color(255, 255, 255));
			jSeparator1.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
			quitter.setBackground(new java.awt.Color(44, 44, 44));
			quitter.setForeground(new java.awt.Color(255, 255, 255));
			modifier.setBackground(new java.awt.Color(30, 33, 30));
			modifier.setForeground(new java.awt.Color(255, 255, 255));
			cut.setBackground(new java.awt.Color(44, 44, 44));
			cut.setForeground(new java.awt.Color(255, 255, 255));
			copy.setBackground(new java.awt.Color(44, 44, 44));
			copy.setForeground(new java.awt.Color(255, 255, 255));
			paste.setBackground(new java.awt.Color(44, 44, 44));
			paste.setForeground(new java.awt.Color(255, 255, 255));
			del.setBackground(new java.awt.Color(44, 44, 44));
			del.setForeground(new java.awt.Color(255, 255, 255));
			jSeparator5.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
			selectall.setBackground(new java.awt.Color(44, 44, 44));
			selectall.setForeground(new java.awt.Color(255, 255, 255));
			date.setBackground(new java.awt.Color(44, 44, 44));
			date.setForeground(new java.awt.Color(255, 255, 255));
			affichage.setBackground(new java.awt.Color(30, 33, 30));
			affichage.setForeground(new java.awt.Color(255, 255, 255));
			statebar.setBackground(new java.awt.Color(44, 44, 44));
			statebar.setForeground(new java.awt.Color(255, 255, 255));
			linewrap.setBackground(new java.awt.Color(44, 44, 44));
			linewrap.setForeground(new java.awt.Color(255, 255, 255));
			jSeparator6.setBackground(new java.awt.Color(30, 33, 30));
			jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
			theme.setBackground(new java.awt.Color(44, 44, 44));
			theme.setForeground(new java.awt.Color(255, 255, 255));
			blackTheme = true;
		}
	}//GEN-LAST:event_themeActionPerformed

	/**
	 *
	 * @Fonctionnalité Sauvegarder
	 * @param evt
	 */
	private void saveActionPerformed(java.awt.event.ActionEvent evt) {
		try
		{
			this.saveFile();
		} catch (IOException var3)
		{
			this.showWriteRightWarning(this.file);
		}
	}

	/**
	 *
	 * @Fonctionnalité Sauvegarder sous
	 * @param evt
	 */
	private void saveasActionPerformed(java.awt.event.ActionEvent evt) {
		try
		{
			this.saveAsFile();
		} catch (IOException var3)
		{
			this.showWriteRightWarning(this.file);
		}
	}

	/**
	 *
	 * @Fonctionnalité Affichage de la barre d'état
	 * @param evt
	 */
	private void statebarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statebarActionPerformed
		JCheckBoxMenuItem item = (JCheckBoxMenuItem) evt.getSource();
		bar.setVisible(item.getState());
	}//GEN-LAST:event_statebarActionPerformed

	/**
	 *
	 * @Fonctionnalité Option de retour à la ligne
	 * @param evt
	 */
	private void linewrapActionPerformed(java.awt.event.ActionEvent evt) {
		JCheckBoxMenuItem item = (JCheckBoxMenuItem) evt.getSource();
		textArea.setLineWrap(item.getState());
	}

	/**
	 *
	 * @Fonctionnalité Quitter le bloc-note
	 * @param evt
	 */
	private void quitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterActionPerformed
		this.dispose();
	}//GEN-LAST:event_quitterActionPerformed

	/**
	 *
	 * @param args
	 * @post fonction main lançant le programme
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Metal".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(blocnotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(blocnotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(blocnotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(blocnotes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new blocnotes().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenu affichage;
	private javax.swing.JPanel bar;
	private javax.swing.JMenuItem copy;
	private javax.swing.JMenuItem cut;
	private javax.swing.JMenuItem date;
	private javax.swing.JMenuItem del;
	private javax.swing.JMenu fichier;
	private javax.swing.JLabel format;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPopupMenu.Separator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JSeparator jSeparator4;
	private javax.swing.JPopupMenu.Separator jSeparator5;
	private javax.swing.JPopupMenu.Separator jSeparator6;
	private javax.swing.JTextArea textArea;
	private javax.swing.JCheckBoxMenuItem linewrap;
	private javax.swing.JMenuBar menubar;
	private javax.swing.JMenu modifier;
	private javax.swing.JMenuItem newnote;
	private javax.swing.JMenuItem newwindow;
	private javax.swing.JMenuItem open;
	private javax.swing.JLabel os;
	private javax.swing.JMenuItem paste;
	private javax.swing.JMenuItem quitter;
	private javax.swing.JMenuItem save;
	private javax.swing.JMenuItem saveas;
	private javax.swing.JMenuItem selectall;
	private javax.swing.JCheckBoxMenuItem statebar;
	private javax.swing.JScrollPane textarea;
	private javax.swing.JMenuItem theme;
	private javax.swing.JLabel zoom;
	// End of variables declaration//GEN-END:variables

	//My varaibles
	private String savedText = "";
	private String fileName;
	private Clipboard clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();
	private File file;
	private boolean blackTheme = true;
}
